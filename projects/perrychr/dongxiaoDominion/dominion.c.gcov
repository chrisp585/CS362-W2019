        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 76232715 returned 100% blocks executed 83%
 76232715:    8:int compare(const void* a, const void* b) {
 76232715:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:		return 1;
 76232715:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
 20328724:   12:		return -1;
 55903991:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 1693431 returned 100% blocks executed 98%
  1693431:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:	struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
  1693431:   44:	SelectStream(1);
call    0 returned 100%
  1693431:   45:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:	//check number of players
  1693431:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   49:	{
        6:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
  1693425:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
 18627612:   57:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:	{
186276147:   59:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:		{
169341960:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:			{
        9:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
  1693416:   73:	if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:	{
   563310:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
  1130106:   77:	else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:	{
   564863:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
   565243:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
  1693416:   87:	if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:	{
   563310:   89:		state->supplyCount[estate] = 8;
   563310:   90:		state->supplyCount[duchy] = 8;
   563310:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
  1130106:   95:		state->supplyCount[estate] = 12;
  1130106:   96:		state->supplyCount[duchy] = 12;
  1130106:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
  1693416:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
  1693416:  102:	state->supplyCount[silver] = 40;
  1693416:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
 35561736:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:	{
279413640:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:		{
262479480:  110:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
 16934160:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:				{
       30:  115:					if (numPlayers == 2) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        3:  116:						state->supplyCount[i] = 8;
        -:  117:					}
       12:  118:					else { state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
 16934145:  122:					state->supplyCount[i] = 10;
        -:  123:				}
 16934160:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
245545320:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
  6775597:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:	{
  5082181:  140:		state->deckCount[i] = 0;
 20328724:  141:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:		{
 15246543:  143:			state->deck[i][j] = estate;
 15246543:  144:			state->deckCount[i]++;
        -:  145:		}
 40657448:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:		{
 35575267:  148:			state->deck[i][j] = copper;
 35575267:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
  6775597:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:	{
  5082181:  156:		if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
  6775597:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:	{
        -:  165:		//initialize hand size to zero
  5082181:  166:		state->handCount[i] = 0;
  5082181:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
 47415648:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:	{
 45722232:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
  1693416:  182:	state->outpostPlayed = 0;
  1693416:  183:	state->phase = 0;
  1693416:  184:	state->numActions = 1;
  1693416:  185:	state->numBuys = 1;
  1693416:  186:	state->playedCardCount = 0;
  1693416:  187:	state->whoseTurn = 0;
  1693416:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
 10160496:  192:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  8467080:  193:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:	}
        -:  195:
  1693416:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
  1693416:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 5082182 returned 100% blocks executed 100%
  5082182:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
  5082182:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
  5082182:  209:	if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  210:		return -1;
  5082181:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 60986172:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 50821810:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
 50821810:  216:		newDeck[newDeckPos] = state->deck[player][card];
 50821810:  217:		newDeckPos++;
171256672:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
120434862:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
 50821810:  221:		state->deckCount[player]--;
        -:  222:	}
 55903991:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 50821810:  224:		state->deck[player][i] = newDeck[i];
 50821810:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
  5082181:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
    #####:  287:	else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
    #####:  292:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
    #####:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
    #####:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:
    #####:  302:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:	return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
    #####:  329:	int count = 0;
        -:  330:
    #####:  331:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:	{
    #####:  333:		if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:	}
        -:  335:
    #####:  336:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:	{
    #####:  338:		if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:	}
        -:  340:
    #####:  341:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:	{
    #####:  343:		if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:	}
        -:  345:
    #####:  346:	return count;
        -:  347:}
        -:  348:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  349:int whoseTurn(struct gameState *state) {
       12:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
    #####:  356:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  357:
        -:  358:	//Discard hand
    #####:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
    #####:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:	//Code for determining the player
    #####:  366:	if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else {
    #####:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
    #####:  373:	state->outpostPlayed = 0;
    #####:  374:	state->phase = 0;
    #####:  375:	state->numActions = 1;
    #####:  376:	state->coins = 0;
    #####:  377:	state->numBuys = 1;
    #####:  378:	state->playedCardCount = 0;
    #####:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
    #####:  383:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  384:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  385:	}
        -:  386:
        -:  387:	//Update money
    #####:  388:	updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  389:
    #####:  390:	return 0;
        -:  391:}
        -:  392:
function isGameOver called 24 returned 100% blocks executed 100%
       24:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
       24:  398:	if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  399:	{
        6:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
       18:  404:	j = 0;
      468:  405:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  406:	{
      450:  407:		if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  408:		{
       18:  409:			j++;
        -:  410:		}
        -:  411:	}
       18:  412:	if (j >= 3)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  413:	{
        3:  414:		return 1;
        -:  415:	}
        -:  416:
       15:  417:	return 0;
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
    #####:  423:	int score = 0;
        -:  424:	//score from hand
    #####:  425:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:	{
    #####:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
    #####:  436:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:	{
    #####:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
    #####:  447:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:	{
    #####:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  455:	}
        -:  456:
    #####:  457:	return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
function drawCard called 12973498 returned 100% blocks executed 85%
 12973498:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
 12973498:  532:	if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  533:
        -:  534:	  //Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
        1:  537:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  538:			state->deck[player][i] = state->discard[player][i];
    #####:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
        1:  542:		state->deckCount[player] = state->discardCount[player];
        1:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:		//Shufffle the deck
        1:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:
        -:  548:		if (DEBUG) {//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
        1:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
        1:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG) {//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
        1:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
        1:  563:		if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  564:			return -1;
        -:  565:
    #####:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:		state->deckCount[player]--;
    #####:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else {
 12973497:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG) {//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
 12973497:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
 12973497:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 12973497:  580:		state->deckCount[player]--;
 12973497:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
 12973497:  584:	return 0;
        -:  585:}
        -:  586:
function getCost called 81 returned 100% blocks executed 97%
       81:  587:int getCost(int cardNumber)
        -:  588:{
       81:  589:	switch (cardNumber)
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  590:	{
        -:  591:	case curse:
        3:  592:		return 0;
        -:  593:	case estate:
        3:  594:		return 2;
        -:  595:	case duchy:
        3:  596:		return 5;
        -:  597:	case province:
        3:  598:		return 8;
        -:  599:	case copper:
        3:  600:		return 0;
        -:  601:	case silver:
        3:  602:		return 3;
        -:  603:	case gold:
        3:  604:		return 6;
        -:  605:	case adventurer:
        3:  606:		return 6;
        -:  607:	case council_room:
        3:  608:		return 5;
        -:  609:	case feast:
        3:  610:		return 4;
        -:  611:	case gardens:
        3:  612:		return 4;
        -:  613:	case mine:
        3:  614:		return 5;
        -:  615:	case remodel:
        3:  616:		return 4;
        -:  617:	case smithy:
        3:  618:		return 4;
        -:  619:	case village:
        3:  620:		return 3;
        -:  621:	case baron:
        3:  622:		return 4;
        -:  623:	case great_hall:
        3:  624:		return 3;
        -:  625:	case minion:
        3:  626:		return 5;
        -:  627:	case steward:
        3:  628:		return 3;
        -:  629:	case tribute:
        3:  630:		return 5;
        -:  631:	case ambassador:
        3:  632:		return 3;
        -:  633:	case cutpurse:
        3:  634:		return 4;
        -:  635:	case embargo:
        3:  636:		return 2;
        -:  637:	case outpost:
        3:  638:		return 5;
        -:  639:	case salvager:
        3:  640:		return 4;
        -:  641:	case sea_hag:
        3:  642:		return 4;
        -:  643:	case treasure_map:
        3:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
        -:  650://declarations of the card functions
        -:  651:int adventurerFunc(int currentPlayer, struct gameState *state);
        -:  652:int smithyFunc(int currentPlayer, struct gameState *state, int handPos);
        -:  653:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  654:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  655:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  656:
        -:  657:
        -:  658:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:	int i;
        -:  662:	int j;
        -:  663:	int k;
        -:  664:	//  int x;
        -:  665:	int index;
    #####:  666:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  667:	int nextPlayer = currentPlayer + 1;
        -:  668:
    #####:  669:	int tributeRevealedCards[2] = { -1, -1 };
        -:  670:	//  int temphand[MAX_HAND];// moved above the if statement
        -:  671:	//  int drawntreasure=0;
        -:  672:	//  int cardDrawn;
        -:  673:	//  int z = 0;// this is the counter for the temp hand
    #####:  674:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  675:		nextPlayer = 0;
        -:  676:	}
        -:  677:
        -:  678:
        -:  679:	//uses switch to select card and perform actions
    #####:  680:	switch (card)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  681:	{
        -:  682:	case adventurer:
    #####:  683:		adventurerFunc(currentPlayer, state);
call    0 never executed
    #####:  684:		return 0;
        -:  685:	case council_room:
    #####:  686:		council_roomAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  687:		return 0;
        -:  688:
        -:  689:	case feast:
    #####:  690:		feastAction(currentPlayer, state, choice1);
call    0 never executed
    #####:  691:		return 0;
        -:  692:
        -:  693:	case gardens:
    #####:  694:		return -1;
        -:  695:
        -:  696:	case mine:
    #####:  697:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  698:
    #####:  699:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  700:		{
    #####:  701:			return -1;
        -:  702:		}
        -:  703:
    #####:  704:		if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  705:		{
    #####:  706:			return -1;
        -:  707:		}
        -:  708:
    #####:  709:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  710:		{
    #####:  711:			return -1;
        -:  712:		}
        -:  713:
    #####:  714:		gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  715:
        -:  716:		//discard card from hand
    #####:  717:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  718:
        -:  719:		//discard trashed card
    #####:  720:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  721:		{
    #####:  722:			if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  723:			{
    #####:  724:				discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  725:				break;
        -:  726:			}
        -:  727:		}
        -:  728:
    #####:  729:		return 0;
        -:  730:
        -:  731:	case remodel:
    #####:  732:		remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  733:		return 0;
        -:  734:
        -:  735:	case smithy:
        -:  736:		//+3 Cards
    #####:  737:		smithyFunc(currentPlayer, state, handPos);
call    0 never executed
    #####:  738:		return 0;
        -:  739:
        -:  740:	case village:
        -:  741:		//+1 Card
    #####:  742:		drawCard(currentPlayer, state);
call    0 never executed
        -:  743:
        -:  744:		//+2 Actions
    #####:  745:		state->numActions = state->numActions + 2;
        -:  746:
        -:  747:		//discard played card from hand
    #####:  748:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  749:		return 0;
        -:  750:
        -:  751:	case baron:
    #####:  752:		state->numBuys++;//Increase buys by 1!
    #####:  753:		if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:			int p = 0;//Iterator for hand!
    #####:  755:			int card_not_discarded = 1;//Flag for discard set!
    #####:  756:			while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  757:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:					state->discardCount[currentPlayer]++;
    #####:  761:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  762:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  763:					}
    #####:  764:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:					state->handCount[currentPlayer]--;
    #####:  766:					card_not_discarded = 0;//Exit the loop
        -:  767:				}
    #####:  768:				else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  769:					if (DEBUG) {
        -:  770:						printf("No estate cards in your hand, invalid choice\n");
        -:  771:						printf("Must gain an estate if there are any\n");
        -:  772:					}
    #####:  773:					if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:						gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:						state->supplyCount[estate]--;//Decrement estates
    #####:  776:						if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:							isGameOver(state);
call    0 never executed
        -:  778:						}
        -:  779:					}
    #####:  780:					card_not_discarded = 0;//Exit the loop
        -:  781:				}
        -:  782:
        -:  783:				else {
    #####:  784:					p++;//Next card
        -:  785:				}
        -:  786:			}
        -:  787:		}
        -:  788:
        -:  789:		else {
    #####:  790:			if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:				state->supplyCount[estate]--;//Decrement Estates
    #####:  793:				if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:					isGameOver(state);
call    0 never executed
        -:  795:				}
        -:  796:			}
        -:  797:		}
        -:  798:
        -:  799:
    #####:  800:		return 0;
        -:  801:
        -:  802:	case great_hall:
        -:  803:		//+1 Card
    #####:  804:		drawCard(currentPlayer, state);
call    0 never executed
        -:  805:
        -:  806:		//+1 Actions
    #####:  807:		state->numActions++;
        -:  808:
        -:  809:		//discard card from hand
    #####:  810:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  811:		return 0;
        -:  812:
        -:  813:	case minion:
        -:  814:		//+1 action
    #####:  815:		state->numActions++;
        -:  816:
        -:  817:		//discard card from hand
    #####:  818:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:
    #####:  820:		if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:		{
    #####:  822:			state->coins = state->coins + 2;
        -:  823:		}
        -:  824:
    #####:  825:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:		{
        -:  827:			//discard hand
    #####:  828:			while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  829:			{
    #####:  830:				discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  831:			}
        -:  832:
        -:  833:			//draw 4
    #####:  834:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  835:			{
    #####:  836:				drawCard(currentPlayer, state);
call    0 never executed
        -:  837:			}
        -:  838:
        -:  839:			//other players discard hand and redraw if hand size > 4
    #####:  840:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:			{
    #####:  842:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  843:				{
    #####:  844:					if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:  845:					{
        -:  846:						//discard hand
    #####:  847:						while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:  848:						{
    #####:  849:							discardCard(handPos, i, state, 0);
call    0 never executed
        -:  850:						}
        -:  851:
        -:  852:						//draw 4
    #####:  853:						for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  854:						{
    #####:  855:							drawCard(i, state);
call    0 never executed
        -:  856:						}
        -:  857:					}
        -:  858:				}
        -:  859:			}
        -:  860:
        -:  861:		}
    #####:  862:		return 0;
        -:  863:
        -:  864:	case steward:
    #####:  865:		if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  866:		{
        -:  867:			//+2 cards
    #####:  868:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  869:			drawCard(currentPlayer, state);
call    0 never executed
        -:  870:		}
    #####:  871:		else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  872:		{
        -:  873:			//+2 coins
    #####:  874:			state->coins = state->coins + 2;
        -:  875:		}
        -:  876:		else
        -:  877:		{
        -:  878:			//trash 2 cards in hand
    #####:  879:			discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  880:			discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  881:		}
        -:  882:
        -:  883:		//discard card from hand
    #####:  884:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:		return 0;
        -:  886:
        -:  887:	case tribute:
    #####:  888:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  889:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  890:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  891:				state->deckCount[nextPlayer]--;
        -:  892:			}
    #####:  893:			else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  894:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  895:				state->discardCount[nextPlayer]--;
        -:  896:			}
        -:  897:			else {
        -:  898:				//No Card to Reveal
        -:  899:				if (DEBUG) {
        -:  900:					printf("No cards to reveal\n");
        -:  901:				}
        -:  902:			}
        -:  903:		}
        -:  904:
        -:  905:		else {
    #####:  906:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  907:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  908:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:					state->deckCount[nextPlayer]++;
    #####:  910:					state->discard[nextPlayer][i] = -1;
    #####:  911:					state->discardCount[nextPlayer]--;
        -:  912:				}
        -:  913:
    #####:  914:				shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  915:			}
    #####:  916:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  917:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:			state->deckCount[nextPlayer]--;
    #####:  919:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  920:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:			state->deckCount[nextPlayer]--;
        -:  922:		}
        -:  923:
    #####:  924:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  925:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:			state->playedCardCount++;
    #####:  927:			tributeRevealedCards[1] = -1;
        -:  928:		}
        -:  929:
    #####:  930:		for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  931:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  932:				state->coins += 2;
        -:  933:			}
        -:  934:
    #####:  935:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  936:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:				drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			}
        -:  939:			else {//Action Card
    #####:  940:				state->numActions = state->numActions + 2;
        -:  941:			}
        -:  942:		}
        -:  943:
    #####:  944:		return 0;
        -:  945:
        -:  946:	case ambassador:
    #####:  947:		j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:		if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:		{
    #####:  951:			return -1;
        -:  952:		}
        -:  953:
    #####:  954:		if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  955:		{
    #####:  956:			return -1;
        -:  957:		}
        -:  958:
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  960:		{
    #####:  961:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  962:			{
    #####:  963:				j++;
        -:  964:			}
        -:  965:		}
    #####:  966:		if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  967:		{
    #####:  968:			return -1;
        -:  969:		}
        -:  970:
        -:  971:		if (DEBUG)
        -:  972:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:		//increase supply count for choosen card by amount being discarded
    #####:  975:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:
        -:  977:		//each other player gains a copy of revealed card
    #####:  978:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:		{
    #####:  980:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  983:			}
        -:  984:		}
        -:  985:
        -:  986:		//discard played card from hand
    #####:  987:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:		//trash copies of cards returned to supply
    #####:  990:		for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:			{
    #####:  994:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  995:				{
    #####:  996:					discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  997:					break;
        -:  998:				}
        -:  999:			}
        -: 1000:		}
        -: 1001:
    #####: 1002:		return 0;
        -: 1003:
        -: 1004:	case cutpurse:
        -: 1005:
    #####: 1006:		updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1007:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:				{
    #####: 1013:					if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1014:					{
    #####: 1015:						discardCard(j, i, state, 0);
call    0 never executed
    #####: 1016:						break;
        -: 1017:					}
    #####: 1018:					if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1019:					{
    #####: 1020:						for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1021:						{
        -: 1022:							if (DEBUG)
        -: 1023:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1024:						}
    #####: 1025:						break;
        -: 1026:					}
        -: 1027:				}
        -: 1028:
        -: 1029:			}
        -: 1030:
        -: 1031:		}
        -: 1032:
        -: 1033:		//discard played card from hand
    #####: 1034:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1035:
    #####: 1036:		return 0;
        -: 1037:
        -: 1038:
        -: 1039:	case embargo:
        -: 1040:		//+2 Coins
    #####: 1041:		state->coins = state->coins + 2;
        -: 1042:
        -: 1043:		//see if selected pile is in play
    #####: 1044:		if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1045:		{
    #####: 1046:			return -1;
        -: 1047:		}
        -: 1048:
        -: 1049:		//add embargo token to selected supply pile
    #####: 1050:		state->embargoTokens[choice1]++;
        -: 1051:
        -: 1052:		//trash card
    #####: 1053:		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1054:		return 0;
        -: 1055:
        -: 1056:	case outpost:
        -: 1057:		//set outpost flag
    #####: 1058:		state->outpostPlayed++;
        -: 1059:
        -: 1060:		//discard card
    #####: 1061:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:		return 0;
        -: 1063:
        -: 1064:	case salvager:
        -: 1065:		//+1 buy
    #####: 1066:		state->numBuys++;
        -: 1067:
    #####: 1068:		if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1069:		{
        -: 1070:			//gain coins equal to trashed card
    #####: 1071:			state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1072:			//trash card
    #####: 1073:			discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1074:		}
        -: 1075:
        -: 1076:		//discard card
    #####: 1077:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:		return 0;
        -: 1079:
        -: 1080:	case sea_hag:
    #####: 1081:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1082:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1083:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:				state->discardCount[i]++;
    #####: 1085:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1086:			}
        -: 1087:		}
    #####: 1088:		return 0;
        -: 1089:
        -: 1090:	case treasure_map:
        -: 1091:		//search hand for another treasure_map
    #####: 1092:		index = -1;
    #####: 1093:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:		{
    #####: 1095:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:			{
    #####: 1097:				index = i;
    #####: 1098:				break;
        -: 1099:			}
        -: 1100:		}
    #####: 1101:		if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1102:		{
        -: 1103:			//trash both treasure cards
    #####: 1104:			discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1105:			discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1106:
        -: 1107:			//gain 4 Gold cards
    #####: 1108:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:			{
    #####: 1110:				gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1111:			}
        -: 1112:
        -: 1113:			//return success
    #####: 1114:			return 1;
        -: 1115:		}
        -: 1116:
        -: 1117:		//no second treasure_map found in hand
    #####: 1118:		return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:	return -1;
        -: 1122:}
        -: 1123:
function discardCard called 737938 returned 100% blocks executed 67%
   737938: 1124:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1125:{
        -: 1126:
        -: 1127:	//if card is not trashed, added to Played pile 
   737938: 1128:	if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1129:	{
        -: 1130:		//add card to played pile
    #####: 1131:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1132:		state->playedCardCount++;
        -: 1133:	}
        -: 1134:
        -: 1135:	//set played card to -1
   737938: 1136:	state->hand[currentPlayer][handPos] = -1;
        -: 1137:
        -: 1138:	//remove card from player's hand
   737938: 1139:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1140:	{
        -: 1141:		//reduce number of cards in hand
    #####: 1142:		state->handCount[currentPlayer]--;
        -: 1143:	}
   737938: 1144:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1145:	{
        -: 1146:		//reduce number of cards in hand
    #####: 1147:		state->handCount[currentPlayer]--;
        -: 1148:	}
        -: 1149:	else
        -: 1150:	{
        -: 1151:		//replace discarded card with last card in hand
   737938: 1152:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1153:		//set last card to -1
   737938: 1154:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1155:		//reduce number of cards in hand
   737938: 1156:		state->handCount[currentPlayer]--;
        -: 1157:	}
        -: 1158:
   737938: 1159:	return 0;
        -: 1160:}
        -: 1161:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1162:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1163:{
        -: 1164:	//Note: supplyPos is enum of choosen card
        -: 1165:
        -: 1166:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1167:	if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1168:	{
    #####: 1169:		return -1;
        -: 1170:	}
        -: 1171:
        -: 1172:	//added card for [whoseTurn] current player:
        -: 1173:	// toFlag = 0 : add to discard
        -: 1174:	// toFlag = 1 : add to deck
        -: 1175:	// toFlag = 2 : add to hand
        -: 1176:
    #####: 1177:	if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1180:		state->deckCount[player]++;
        -: 1181:	}
    #####: 1182:	else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1183:	{
    #####: 1184:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1185:		state->handCount[player]++;
        -: 1186:	}
        -: 1187:	else
        -: 1188:	{
    #####: 1189:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1190:		state->discardCount[player]++;
        -: 1191:	}
        -: 1192:
        -: 1193:	//decrease number in supply pile
    #####: 1194:	state->supplyCount[supplyPos]--;
        -: 1195:
    #####: 1196:	return 0;
        -: 1197:}
        -: 1198:
function updateCoins called 1693416 returned 100% blocks executed 82%
  1693416: 1199:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1200:{
        -: 1201:	int i;
        -: 1202:
        -: 1203:	//reset coin count
  1693416: 1204:	state->coins = 0;
        -: 1205:
        -: 1206:	//add coins for each Treasure card in player's hand
 10160496: 1207:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1208:	{
  8467080: 1209:		if (state->hand[player][i] == copper)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1210:		{
  6660556: 1211:			state->coins += 1;
        -: 1212:		}
  1806524: 1213:		else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:		{
    #####: 1215:			state->coins += 2;
        -: 1216:		}
  1806524: 1217:		else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:		{
    #####: 1219:			state->coins += 3;
        -: 1220:		}
        -: 1221:	}
        -: 1222:
        -: 1223:	//add bonus
  1693416: 1224:	state->coins += bonus;
        -: 1225:
  1693416: 1226:	return 0;
        -: 1227:}
        -: 1228:
function adventurerFunc called 955467 returned 100% blocks executed 93%
   955467: 1229:int adventurerFunc(int currentPlayer, struct gameState *state)
        -: 1230:{
        -: 1231:	int cardDrawn;
   955467: 1232:	int drawntreasure = 0;
        -: 1233:	int temphand[MAX_HAND];
   955467: 1234:	int z = 0; //this is the counter for the temp hand
  4203538: 1235:	while (drawntreasure < 2) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
  2292604: 1236:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1237:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1238:		}
  2292604: 1239:		drawCard(currentPlayer, state);
call    0 returned 100%
  2292604: 1240:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
  2292604: 1241:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
  1910934: 1242:			drawntreasure++;
        -: 1243:		else {
   381670: 1244:			temphand[z] = cardDrawn;
        -: 1245:			/********************** BUG ***************************************/
        -: 1246:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1247:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   381670: 1248:			z++;
        -: 1249:		}
        -: 1250:	}
  2292604: 1251:	while (z - 1 >= 0) {
branch  0 taken 29%
branch  1 taken 71% (fallthrough)
   381670: 1252:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
   381670: 1253:		z = z - 1;
        -: 1254:	}
   955467: 1255:	return 0;
        -: 1256:}
        -: 1257:
        -: 1258:
function smithyFunc called 737938 returned 100% blocks executed 100%
   737938: 1259:int smithyFunc(int currentPlayer, struct gameState *state, int handPos)
        -: 1260:{
        -: 1261:	int i;
  2951752: 1262:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1263:	{
  2213814: 1264:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1265:	}
        -: 1266:
        -: 1267:	//discard card from hand
        -: 1268:	/************************** BUG *************************/
        -: 1269:	/* Trash the card instead of put the card in the discard pile */
        -: 1270:	//discardCard(handPos, currentPlayer, state, 0);
   737938: 1271:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
   737938: 1272:	return 0;
        -: 1273:}
        -: 1274:
        -: 1275:
function council_roomAction called 0 returned 0% blocks executed 0%
    #####: 1276:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1277:{
        -: 1278:	int i;
        -: 1279:	//+4 Cards
    #####: 1280:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1281:	{
    #####: 1282:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1283:	}
        -: 1284:
        -: 1285:	//+1 Buy
    #####: 1286:	state->numBuys++;
        -: 1287:
        -: 1288:	//Each other player draws a card
    #####: 1289:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1290:	{
        -: 1291:		/*************************** BUG *****************************/
        -: 1292:		/* every player draws a card */
        -: 1293:	   // if ( i != currentPlayer )
        -: 1294:		 // {
    #####: 1295:		drawCard(i, state);
call    0 never executed
        -: 1296:		// }
        -: 1297:	}
        -: 1298:
        -: 1299:	//put played card in played card pile
    #####: 1300:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1301:	return 0;
        -: 1302:}
        -: 1303:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1304:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1305:{
        -: 1306:	int i;
        -: 1307:	int temphand[MAX_HAND];
        -: 1308:	//gain card with cost up to 5
        -: 1309:	//Backup hand  OFF-By-ONE??????????????
    #####: 1310:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1311:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1312:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1313:	}
        -: 1314:	//Backup hand
        -: 1315:
        -: 1316:	//Update Coins for Buy
    #####: 1317:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1318:	int x = 1;//Condition to loop on
    #####: 1319:	while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1320:		if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1321:			if (DEBUG)
        -: 1322:				printf("None of that card left, sorry!\n");
        -: 1323:
        -: 1324:			if (DEBUG) {
        -: 1325:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1326:			}
        -: 1327:		}
    #####: 1328:		else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1329:			printf("That card is too expensive!\n");
call    0 never executed
        -: 1330:
        -: 1331:			if (DEBUG) {
        -: 1332:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1333:			}
        -: 1334:		}
        -: 1335:		else {
        -: 1336:			if (DEBUG) {
        -: 1337:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1338:			}
        -: 1339:
    #####: 1340:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1341:			/************************* BUG *************************************/
        -: 1342:			/* infinite loop */
        -: 1343:			//x = 0;//No more buying cards
        -: 1344:
        -: 1345:			if (DEBUG) {
        -: 1346:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:			}
        -: 1348:
        -: 1349:		}
        -: 1350:	}
        -: 1351:
        -: 1352:	//Reset Hand
    #####: 1353:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1354:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1355:		temphand[i] = -1;
        -: 1356:	}
    #####: 1357:	return 0;
        -: 1358:}
        -: 1359:
function remodelAction called 0 returned 0% blocks executed 0%
    #####: 1360:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1361:{
        -: 1362:	int i;
    #####: 1363:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1364:
    #####: 1365:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1366:	{
    #####: 1367:		return -1;
        -: 1368:	}
        -: 1369:
    #####: 1370:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1371:
        -: 1372:	//discard card from hand
    #####: 1373:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1374:
        -: 1375:	//discard trashed card
    #####: 1376:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:	{
    #####: 1378:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1379:		{
    #####: 1380:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1381:			break;
        -: 1382:		}
        -: 1383:	}
    #####: 1384:	return 0;
        -: 1385:}
        -: 1386:
        -: 1387://end of dominion.c
        -: 1388:
